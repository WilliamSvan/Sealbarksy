using GameCenterForm.DataAccessLayers;

namespace GameCenterForm.Forms
{

    public partial class InstalledGamesForm : Form
    {
        DataAccessLayerGamingConsoleGame dataAccessLayer = new();

        //In this method, we first set the DataSource property of the DataGridView to the result of
        //calling GetAll().Tables[0]. This will populate the DataGridView with data.

        //Next, we add an event handler for the DataBindingComplete event of the DataGridView.
        //We do this by subscribing to the event with the += operator and passing in the name of the
        //event handler method (dataGridViewConsoles_DataBindingComplete). This event handler
        //method will be called when the DataBindingComplete event is raised.
        public void FillDataGridViewGamesInConsole()
        {
            try
            {
                string cbConsoleText = cbConsole.Text;

                dataGridViewInstalledGames.DataSource = dataAccessLayer.GetGamesOnConsoles(cbConsoleText).Tables[0];
                dataGridViewInstalledGames.DataBindingComplete += dataGridViewConsoles_DataBindingComplete;
            }
            catch (Exception ex)
            {
                ErrorHandler.HandleException(ex);
            }

        }

        public void FillDataGridViewGames()
        {
            try
            {
                dataGridViewInstalledGames.DataSource = dataAccessLayer.GetConsoleAndGame().Tables[0];
                dataGridViewInstalledGames.DataBindingComplete += dataGridViewConsoles_DataBindingComplete;

            }
            catch (Exception ex)
            {
                ErrorHandler.HandleException(ex);
            }
        }

        //Method DataGridViewConsoles_DataBindingComplete and comment generated by ChatGPT
        //This method is called when the DataBindingComplete event is raised. In this method,
        //we simply call the ClearSelection() method of the DataGridView to clear any row selection
        //that may have occurred during the data binding process.

        //By using the DataBindingComplete event to clear the row selection, we ensure that the
        //ClearSelection() method is called after the DataGridView has been populated with data
        //and any row selection has occurred.This should prevent the first row from being selected
        //when the DataGridView is initially displayed.
        private void dataGridViewConsoles_DataBindingComplete(object sender, DataGridViewBindingCompleteEventArgs e)
        {
            dataGridViewInstalledGames.ClearSelection();
        }

        public InstalledGamesForm()
        {
            InitializeComponent();
            FillDataGridViewGames();
            PopulateConsoleComboBox();


        }

        private void PopulateConsoleComboBox()
        {
            List<string> items = DataAccessLayerBookings.GetComboBoxConsoles();

            cbConsole.Items.Clear();
            cbConsole.Items.AddRange(items.ToArray());

        }
        private void PopulateInstallGameComboBox()
        {
            string console = cbConsole.Text;
            List<string> items = DataAccessLayerGamingConsoleGame.GetNonInstalledGames(console);

            cbGame.Items.Clear();
            cbGame.Items.AddRange(items.ToArray());
        }

        private void PopulateUnInstallGameComboBox()
        {
            string cbText = cbConsole.Text;
            List<string> items = DataAccessLayerGamingConsoleGame.GetConsoleGames(cbText);

            cbUnInstall.Items.Clear();
            cbUnInstall.Items.AddRange(items.ToArray());
        }

        private void cbConsole_SelectedIndexChanged(object sender, EventArgs e)
        {
            FillDataGridViewGamesInConsole();
            PopulateUnInstallGameComboBox();
            PopulateInstallGameComboBox();


        }

        private void dataGridViewInstalledGames_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            //Returns how many columns there are in the DataGridView
            int columnCount = dataGridViewInstalledGames.Columns.Count;

            if (e.ColumnIndex < columnCount)
            {
                dataGridViewInstalledGames.ClearSelection();
                dataGridViewInstalledGames.CurrentRow.Selected = true;
            }

        }

        private void installGame_Click(object sender, EventArgs e)
        {

            string console = cbConsole.Text;
            string game = cbGame.Text;

            dataAccessLayer.InstallGame(console, game);

            dataAccessLayer.GetGamesOnConsoles(console);
            FillDataGridViewGamesInConsole();

            PopulateUnInstallGameComboBox();
            PopulateInstallGameComboBox();
            cbGame.ResetText();


        }

        private void unInstallGame_Click(object sender, EventArgs e)
        {
            string console = cbConsole.Text;
            string game = cbUnInstall.Text;

            dataAccessLayer.UninstallGame(console, game);
            FillDataGridViewGamesInConsole();
            PopulateUnInstallGameComboBox();
            PopulateInstallGameComboBox();
            cbUnInstall.ResetText();


        }

        private void btnReset_Click(object sender, EventArgs e)
        {
            resetButtons();
            FillDataGridViewGames();

        }

        private void resetButtons()
        {
            cbConsole.ResetText();
            cbGame.ResetText();
            cbUnInstall.ResetText();
        }

        private void cbConsole_DrawItem(object sender, DrawItemEventArgs e)
        {
            string itemText = cbConsole.Items[e.Index].ToString();
            Color itemColor = Color.Black;
            Font itemFont = new Font("NirmalaUI", 12, FontStyle.Bold);
            Color selectedColor = Color.FromArgb(51, 153, 255);

            e.DrawBackground();
            e.Graphics.DrawString(itemText, itemFont, new SolidBrush(itemColor), e.Bounds);
            e.DrawFocusRectangle();
        }

        private void cbGame_DrawItem(object sender, DrawItemEventArgs e)
        {
            string itemText = cbGame.Items[e.Index].ToString();
            Color itemColor = Color.Black;
            Font itemFont = new Font("NirmalaUI", 12, FontStyle.Bold);
            Color selectedColor = Color.FromArgb(51, 153, 255);

            e.DrawBackground();
            e.Graphics.DrawString(itemText, itemFont, new SolidBrush(itemColor), e.Bounds);
            e.DrawFocusRectangle();
        }

        private void cbUnInstall_DrawItem(object sender, DrawItemEventArgs e)
        {
            string itemText = cbUnInstall.Items[e.Index].ToString();
            Color itemColor = Color.Black;
            Font itemFont = new Font("NirmalaUI", 12, FontStyle.Bold);
            Color selectedColor = Color.FromArgb(51, 153, 255);

            e.DrawBackground();
            e.Graphics.DrawString(itemText, itemFont, new SolidBrush(itemColor), e.Bounds);
            e.DrawFocusRectangle();
        }

        private void label2_Click(object sender, EventArgs e)
        {

        }
    }
}
