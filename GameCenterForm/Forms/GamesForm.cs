using GameCenterForm.ClassLibrary;
using GameCenterForm.DataAccessLayers;
using System.Data;

namespace GameCenterForm.Forms
{
    public partial class GamesForm : Form
    {
        DataAccessLayerGames dataAccessLayer = new();
        public GamesForm()
        {
            InitializeComponent();
            FillDataGridView();
        }
        //In this method, we first set the DataSource property of the DataGridView to the result of
        //calling GetAll().Tables[0]. This will populate the DataGridView with data.

        //Next, we add an event handler for the DataBindingComplete event of the DataGridView.
        //We do this by subscribing to the event with the += operator and passing in the name of the
        //event handler method (dataGridViewGames_DataBindingComplete). This event handler
        //method will be called when the DataBindingComplete event is raised.
        public void FillDataGridView()
        {
            try
            {
                dataGridViewGames.DataSource = dataAccessLayer.GetAll().Tables[0];
                dataGridViewGames.DataBindingComplete += dataGridViewGames_DataBindingComplete;
            }
            catch (Exception ex)
            {
                ErrorHandler.HandleException(ex);
            }
        }

        //Method dataGridViewGames_DataBindingComplete and comment generated by ChatGPT
        //This method is called when the DataBindingComplete event is raised. In this method,
        //we simply call the ClearSelection() method of the DataGridView to clear any row selection
        //that may have occurred during the data binding process.

        //By using the DataBindingComplete event to clear the row selection, we ensure that the
        //ClearSelection() method is called after the DataGridView has been populated with data
        //and any row selection has occurred.This should prevent the first row from being selected
        //when the DataGridView is initially displayed.

        private void dataGridViewGames_DataBindingComplete(object sender, DataGridViewBindingCompleteEventArgs e)
        {
            dataGridViewGames.ClearSelection();
        }

        private void dataGridViewGames_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {

                //Returns how many columns there are in the DataGridView
                int columnCount = dataGridViewGames.Columns.Count;

                if (e.ColumnIndex < columnCount)
                {
                    dataGridViewGames.ClearSelection();
                    dataGridViewGames.CurrentRow.Selected = true;
                }
            }
            catch (Exception ex)
            {
                ErrorHandler.HandleException(ex);
            }
        }

        private void txtBoxSearch_TextChanged(object sender, EventArgs e)
        {
            try
            {

                string searchText = txtBoxSearch.Text.Trim();

                // Create a DataSet and fill it with all Games
                DataSet dataSet = dataAccessLayer.Find(searchText);

                dataGridViewGames.DataSource = dataSet.Tables[0];
            }
            catch (Exception ex)
            {
                ErrorHandler.HandleException(ex);
            }
        }


        private void btnCreate_Click(object sender, EventArgs e)
        {
            try
            {
                NewGameForm form = new NewGameForm();
                form.ShowDialog(this);
                FillDataGridView();
            }
            catch (Exception ex)
            {
                ErrorHandler.HandleException(ex);
            }
        }

        private void btnDelete_Click(object sender, EventArgs e)
        {
            try
            {
                // Checking if any row in the DataGridView is selected
                //If no, the user will be notified by a textbox and the method stops here
                if (dataGridViewGames.SelectedRows.Count == 1)
                {
                    // Get the selected row and put the values in a Game object
                    DataGridViewRow selectedRow = dataGridViewGames.SelectedRows[0];
                    string name = selectedRow.Cells["GameName"].Value.ToString();
                    int nbrOfPlayers = (int)selectedRow.Cells["NbrOfPlayers"].Value;

                    Game game = new(name, nbrOfPlayers);

                    //MessageBox that asks user to confirm deletion
                    DialogResult result =
                        MessageBox.Show(
                            $"You are about to delete ({game.Name}). Do you want to proceed?",
                            "Confirm deletion",
                            MessageBoxButtons.YesNo,
                            MessageBoxIcon.Question);

                    //If user presses No nothing happens
                    if (result == DialogResult.No)
                    {
                        return;
                    }
                    dataAccessLayer.Delete(game);
                    FillDataGridView();
                }
                // 0 selected
                else if (dataGridViewGames.SelectedRows.Count < 1)
                {
                    MessageBox.Show("Please select a game to delete!", "No game selected",
                        MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
                //Else too many rows selected
                else
                {
                    MessageBox.Show("Please select only one game to delete!", "Too many selected",
                        MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
            catch (Exception ex)
            {
                ErrorHandler.HandleException(ex);
            }
        }

        private void btnUpdate_Click(object sender, EventArgs e)
        {
            //Checks if only one row is selected
            if (dataGridViewGames.SelectedRows.Count == 1)
            {
                // Gets the selected row
                DataGridViewRow selectedRow = dataGridViewGames.SelectedRows[0];

                string selectedGameName = selectedRow.Cells["GameName"].Value.ToString();
                int nbrOfPlayers = (int)selectedRow.Cells["NbrOfPlayers"].Value;

                UpdateGameForm form = new(selectedGameName, nbrOfPlayers);
                form.ShowDialog();
            }
            // 0 selected
            else if (dataGridViewGames.SelectedRows.Count < 1)
            {
                MessageBox.Show("Please select a game to update!", "No game selected",
                    MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            //Else too many rows selected
            else
            {
                MessageBox.Show("Please select only one game to update!", "Too many selected",
                    MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }


            FillDataGridView();
        }

    }
}
